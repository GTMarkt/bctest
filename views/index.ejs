<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Experimental PCoin-Blockchain</title>
    <link rel="stylesheet" href="css/styles.css" type="text/css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css"> 
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
</head>
<body>
    <h1 style="text-align:center">--- Transactions Block Records ---</h1>

    <hr><br>
    
    <div class="form-group row">
        <label for="accUsername" class="col-4 col-form-label">Account Username</label> 
        <div class="col-8">
            <input id="accUsername" name="accUsername" type="text" class="form-control">
        </div>
    </div>

    <div class="form-group row">
        <label for="accCoin" class="col-4 col-form-label">Account's Current Coin</label> 
        <div class="col-8">
            <input id="accCoin" name="accCoin" type="number" class="form-control">
        </div>
    </div> 
      
    <div class="form-group row">
        <label for="accPublicKey" class="col-4 col-form-label">Account Public Key</label> 
        <div class="col-8">
            <input id="accPublicKey" name="accPublicKey" type="text" class="form-control">
        </div>
    </div> 

    <hr>
    <div id="transactInfo">
        <!-- <div id="ti-Title" style="font-size:25px; text-align:center;">
            Number of Transactions per Week : <%= bc.chain.length - 1 %> 
        </div> -->
        <div id="transactGraph" style="font-size:25px; text-align:center;">
            Still Error:
        </div>
        <ul style="font-size:20px;">
            <li>WebSocket implemented, but the port to connect seems to open only one time, then no response in client when server sent things</li>
            <li>Sender still not able to transfer, because of enclosed other end, so no way to insert current user's wallet address</li>
            <li>Index page still able to be accessed manually, not through login page</li>
            <li>Overkill architecture system -> huge security hole and confusion</li>
        </ul>
    </div>

    <br><hr><hr><br>

    <div class="card">
        <div class="card-header">Create a Transaction</div>
        <div class="card-body">
            <form>
                <!-- Input type text -->
                <div class="form-group row ">
                    <label for="tfDest" class="col-sm-2 col-form-label text-right"> Destination Public Key</label>
                    <div class="col-sm-10">
                        <input type="text" class="form-control" name="tfDest" id="tfDest" placeholder="Recipient's public key address" required>
                        <small class="text-muted form-text">Ask your recipient to send their public-key address to you and paste it here</small>
                    </div>
                </div>
                
                <!-- Input type text -->
                <div class="form-group row ">
                    <label for="tfAmount" class="col-sm-2 col-form-label text-right">Amount of Coins</label>
                    <div class="col-sm-10">
                        <input type="number" class="form-control" name="tfAmount" id="tfAmount" placeholder="Input your preferred amount of coin to transfer here" required>
                        <small class="text-muted form-text">Double check the amount number, zeroes, etc.</small>
                    </div>
                </div>
                
                <!-- button -->
                <div class="form-group row ">
                    <label for="confirmButton" class="col-sm-2 col-form-label text-right"></label>
                    <div class="col-sm-10">
                    <button type="button" class="btn btn-primary btn-block btn-lg" name="confirmButton" id="confirmButton">Create Transaction</button>
                        <small class="text-muted form-text">Double check whether the amount and the address is right</small>
                    </div>
                </div>
            </form>
        </div>
    </div>


    <br><br><hr><br>

    <fieldset id="transLedger">
        <legend> Transactions Ledger </legend>
        <br>
        <div class="ledger">
            <% let countGen = 0 %> 
            <% for (let block of bc.chain) { %>
                <% if (countGen === 0) {%>
                    <div>
                        <div>
                            Block Data: <%= block.data %>
                        </div>
                        <div>
                            Block Time: <%= block.timestamp %>
                        </div>
                        <div>
                            Block Hash: <%= block.hash %>
                        </div>
                    </div>
                <% } else { %>
                    <hr>
                    <div>
                        <div>
                            <ul>
                                <li>From         : <%= block.data[0].input.address %></li>
                                <li>Sender has   : <%= block.data[0].input.amount %> </li>
                                <li>Transactions : <pre><%= JSON.stringify(block.data[0].outputs, undefined, 2) %></pre> </li>
                            </ul>

                        </div>
                        <div>
                            <p>Block Time: <%= new Date(block.timestamp).toUTCString() %></p>
                        </div>
                        <div>
                            <p>Block Hash: <%= block.hash %></p>
                        </div>
                    </div>
                <% } %> 
                <% countGen++ %> 
            <% } %>
        </div>
        <%= wallet.calculateBalance(bc)%>
        <%= wallet.toString()%>
    </fieldset>

    <script>
        let destination = document.getElementById(`tfDest`).value,
            amount = document.getElementById(`tfAmount`).value,
            scBtn = document.getElementById("confirmButton"),
            accUsername = document.getElementById(`accUsername`),
            accCoin = document.getElementById("accCoin"),
            accPublicKey = document.getElementById(`accPublicKey`),
            ledger = document.getElementsByClassName("ledger"),
            trResult, 
            transactionData = {
                "recipient" : destination,
                "amount" : amount
            }
        
        console.log(`Transaction data : ${JSON.stringify(transactionData)}`)
        
        
        const ws = new WebSocket(`ws://localhost:5001`);
        
        
        // ws.onopen = () => {
            //     // scBtn.disabled = false
            //     // ws.send({type: 'CHAIN'})
            //     ws.send()
            // }
            
        
        ws.addEventListener("open", () =>{
            console.log(`Always open!`)
            // ws.send({type : "CHAIN"})
        })
        
        ws.addEventListener("message", (receivedMessage) => {
            console.log(`Received Message Data is : ${receivedMessage.data}`);
        })

        ws.onclose = (event) => {
            if (event.wasClean) {
                alert(`[close] Connection closed cleanly, code=${event.code} reason=${event.reason}`);
            } else {
                alert('[close] Connection died');
            }
        }
        
        ws.addEventListener("error", (error) => {
            console.log("Error in WebSocket")
        })

        window.addEventListener("load", () => {
            document.getElementById('tfDest').value = null
            document.getElementById('tfAmount').value = null

            destination = null
            amount = null

            accUsername.setAttribute("readonly", "true");
            accCoin.setAttribute("readonly", "true");
            accPublicKey.setAttribute("readonly", "true");
            
            accUsername.value = "<%= localStorage.getItem('username') %>"
            accCoin.value = "<%= localStorage.getItem('accAmount') %>";
            accPublicKey.value = "<%= localStorage.getItem('public-key') %>"
            
            // scBtn.disabled = true;
            console.log("Invoked")
            
            transactionData = {
                "recipient" : null,
                "amount" : null
            }
        })
                        
        function createElement(text) {
            // let tempText = JSON.stringify(text, undefined, 2)
            let tempText = text
            let timeStamp, addressFrom, addressTo, amountTo
            console.log(text)
            
            tempText.forEach((obj) => {
                timestamp = obj.timestamp
                obj.data.forEach((transacts) => {
                    addressFrom = transacts.address
                    addressTo = transacts.outputs.address
                    amountTo = transacts.outputs.amount
                })
            })

            let tempJson = {
                timeStamp: timeStamp, 
                addressFrom: addressFrom,
                addressTo: addressTo,
                amountTo: amountTo}
                
                
            let newEl = document.createElement("div")
            newEl.innerHTML += `<div>${JSON.stringify(text)}</div>`
            document.body.appendChild(newEl)
        }

        function appendNodes(data, time, hash) {
            const crDiv = document.createElement("div")
            const dataTextNode = document.createTextNode(data)
            const timeTextNode = document.createTextNode(time)
            const hashTextNode = document.createTextNode(hash)

            crDiv.appendNodes(dataTextNode, timeTextNode, hashTextNode)
            ledger.appendChild(crDiv)
        }

        scBtn.addEventListener("click", () => {
            // To get BLOCKS
            // var pos = new XMLHttpRequest();
            // pos.open("GET", "/h/mine-transactions", true)
            // pos.send()
            // pos.onreadystatechange = () => {
            //     if (pos.responseText !== null || pos.responseURL !== 0) {
            //         console.log(`1st result: ${JSON.stringify(pos.responseText)}`)
            //     }
            // }
            destination = document.getElementById('tfDest').value
            amount = document.getElementById('tfAmount').value
            
            if (destination.length != 0  && amount > 0) {
                document.getElementById(`tfDest`).style.borderColor = "green"
                document.getElementById(`tfAmount`).style.borderColor = "green"

                if (accPublicKey == null && accAmount == null || accPublicKey == "" && accAmount == "")
                    scBtn.disabled = false
                else
                    scBtn.disabled = true
                transactionData = {
                    "recipient": destination,
                    "amount": amount
                }
                console.log(`Button Clicked and sent! ${JSON.stringify(transactionData)}`)
                fetch('h/transact', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(transactionData),
                    })
                    .then(response => response.json())
                    .then(data => {
                        createElement(data)
                        console.log('Transaction result: ', data);
                    })
                    .catch((error) => {
                        console.error('Error:', error);
                    })
            } else {
                scBtn.disabled = true;
            }
        })
        function createTrans() {
            var amt = parseFloat(amount.value)
            var dest = destination.value;

            if (dest && typeof amt === "number") {
                let data = {
                    recipient: dest,
                    amount: amt
                }
                call(data)
            }
        }

        function call(data) {
            var resp1 = ``, resp2=``
            let a = new XMLHttpRequest()
            a.open("POST", `/h/transact`)
            a.setRequestHeader("Content-Type", "application/json")
            a.send(JSON.stringify(data))
            a.onreadystatechange = function() {
                if (this.readyState == 4 && this.status == 200) {
                    resp1 = JSON.parse(JSON.stringify(a.responseText, null, 2))
                    resp1 = JSON.parse(resp1)
                    console.log(resp1)

                    for(let elems of resp1) {
                        const fromAdd = elems.input.address
                        console.log(`From   : ${fromAdd}`)
                        for (const output of elems.outputs) { // Transactions [0] is remaining credits
                            if (output.address === fromAdd) continue
                            else {
                                console.log(`To     : ${output.address}`)
                                console.log(`Amount : ${output.amount}`)
                            }
                        }
                    }
                    
                    let b = new XMLHttpRequest()
                    b.open("GET", `/h/mine-transactions`)
                    b.send()
                    b.onreadystatechange = function() {
                        if (this.readyState == 4 && this.status == 200) {
                            resp2 = JSON.parse(JSON.stringify(b.responseText, null, 4))
                            resp2 = JSON.parse(resp2)
                            // console.log(resp2) work

                            console.log(`-------START BLOCK TEST--------`)
                            for(let blockNum of resp2) {
                                console.log(`Time: ${blockNum.timestamp}`)
                                console.log(`Hash: ${blockNum.hash}`)
                                console.log(`Diff: ${blockNum.difficulty}`)

                                const div = document.createElement(`div`)

                                div.className = `resultChain`
                                div.innerHTML = `
                                    <div class="res">From   : ${fromAdd}</div>
                                    <div class="res">To     : ${output.address}</div>
                                    <div class="res">Amount : ${output.amount}</div>
                                    <div class="res">Time   : ${blockNum.timestamp}</div>
                                `
                                document.getElementById(`ledger`).appendChild(div)
                            }
                        
                        }
                        // TODO:
                        // 1. Make sure output @line 153 could access the output from
                        //  line 124
                        // 2. Try to append the html together with value
                        // 3. Set the architecture, either envelope ajax a together with b
                        // or b in a to make all variable accessible
                        // 4. Create the display to display chain or multiple chain 
                    }
                }
            }
        }
    
        
    // EJS script alternative : https://stackoverflow.com/a/57594261 or
    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset
    
    </script>

</body>
</html>