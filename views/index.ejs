<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Experimental PCoin-Blockchain</title>
    <link rel="stylesheet" href="css/styles.css" type="text/css">
</head>
<body>
    <h1>Transactions Block Records Here</h1>

    <hr><br>
    
    <div id="transactInfo">
        <div id="ti-Title" style="font-size:25px;">
            Number of Transactions per Week : <%= bc.chain.length %> 
        </div>
        <div id="transactGraph">

        </div>
    </div>

    <br><br>

    <fieldset>
        <legend>Transfer Info</legend>
        <label for="Dest">Destination </label>
        <input id="Dest" type="text" width="50%" height="40px" name="Dest" placeholder="Insert the Public wallet key addr"><br><br>
        <label for="Amt" >Amount      </label>
        <input id="Amt" type="number" width="20%" height="40px" name="Amt" placeholder="Insert the amount"><br><br>
        <label for="Note">Note        </label>
        <input id="Note" type="text" width="50%" height="40px" maxlength="30" name="Note" placeholder="Type some note or msg upto 30 letters"><br><br>
        <input type="button" value="Send Coins!" id="confirmButton">
        <!-- <input type="button" onClick="createTrans()" value="Send Coins!" id="confirmButton"> -->
    </fieldset>
    <br><br><hr><br>

    <fieldset id="transLedger">
        <legend> Transactions Ledger </legend>
        <br>
        <div class="ledger">
            <% let countGen = 0 %> 
            <% for (let block of bc.chain) { %>
                <% if (countGen === 0) {%>
                    <div>
                        <div>
                            Block Data: <%= block.data %>
                        </div>
                        <div>
                            Block Time: <%= block.timestamp %>
                        </div>
                        <div>
                            Block Hash: <%= block.hash %>
                        </div>
                    </div>
                <% } else { %>
                    <!-- WHAT TO DO:
                    1. Set interval to make the block regularly check without reloading the page
                    2. Set the ajax call to /transact from form input for user to transact, then call
                       /mine-transactions to show the newest block!!!!! -->
                    <hr>
                    <div>
                        <div>
                            <ul>
                                <li>From         : <%= block.data[0].input.address %></li>
                                <li>Sender has   : <%= block.data[0].input.amount %> </li>
                                <li>Transactions : <pre><%= JSON.stringify(block.data[0].outputs, undefined, 2) %></pre> </li>
                            </ul>

                        </div>
                        <div>
                            <p>Block Time: <%= new Date(block.timestamp).toUTCString() %></p>
                        </div>
                        <div>
                            <p>Block Hash: <%= block.hash %></p>
                        </div>
                    </div>
                <% } %> 
                <% countGen++ %> 
            <% } %>
        </div>
    </fieldset>

    <script>
        let destination = document.getElementById(`Dest`).value,
            amount = document.getElementById(`Amt`).value;
        let transactionData = {
            "recipient": destination,
            "amount": amount
        }

        function appendNodes(data, time, hash) {
            var ledger = document.getElementsByClassName("ledger")
            // ledger.innerHTML += 
            //     `<div>${data}</div><div>${time}</div><div>${hash}</div>`;

            const crDiv = document.createElement("div")
            const dataTextNode = document.createTextNode(data)
            const timeTextNode = document.createTextNode(time)
            const hashTextNode = document.createTextNode(hash)

            crDiv.appendNodes(dataTextNode, timeTextNode, hashTextNode)
            ledger.appendChild(crDiv)

            // crDiv.appendChild(dataTextNode)
            // crDiv.appendChild(timeTextNode)
            // crDiv.appendChild(hashTextNode)
        }

        let abc = document.getElementById("confirmButton")

        abc.addEventListener("click", () => {
            let aaaa = {}
            var pos = new XMLHttpRequest();
            pos.open("GET", "/mine-transactions", true)
            pos.send()

            // pos.open("POST", "/transact", true)
            // pos.send(transactionData)
            pos.onreadystatechange = () => {
                if (pos.responseText !== null || pos.responseURL != 0) {
                    aaaa = JSON.parse(pos.responseText)
                    console.log(aaaa)
                }
            }
            for (var key in aaaa) {
                appendNodes(JSON.stringify(key.data), key.timestamp, key.hash) 
            }
            // appendNodes(aaaa.data, aaaa.timestamp, aaaa.hash)
        })
        
        function createTrans() {
            var amt = parseFloat(document.getElementById(`Amt`).value)
            var dest = document.getElementById(`Dest`).value;
            var note = document.getElementById(`Note`).value;

            if (dest && note && typeof amt === "number") {
                let data = {
                    recipient: dest,
                    amount: amt
                }
                call(data)
            }
        }

        function call(data) {
            var resp1 = ``, resp2=``
            let a = new XMLHttpRequest()
            a.open("POST", `/transact`)
            a.setRequestHeader("Content-Type", "application/json")
            a.send(JSON.stringify(data))
            a.onreadystatechange = function() {
                if (this.readyState == 4 && this.status == 200) {
                    resp1 = JSON.parse(JSON.stringify(a.responseText, null, 2))
                    resp1 = JSON.parse(resp1)
                    console.log(resp1)

                    var resp1 = [
                        {
                            "id": "44131750-927a-11ec-804e-ed296b2456af",
                            "input": {
                                "timestamp": 1645381436741,
                                "amount": 500,
                                "address": "04c5ab0e483108179ca0ca63d998ad30eac006512be67ac14e06b1dd6ff96b5a778ca10fe2bacd790eb5b1bda3ce1eac067d102779f7a4f4d7de9c9ba2e14c5ae1",
                                "signature": {
                                    "r": "8f8e66e3f6d481a6823ecbbc5a8eb3d8b60a2762db9aa1499315d5b2d4247631",
                                    "s": "cb881bf8635cfcb5569e98685f3429435ea718ac3ffd886bb5f9f933b20293e4",
                                    "recoveryParam": 1
                                }
                            },
                            "outputs": [
                                {
                                    "amount": 400,
                                    "address": "04c5ab0e483108179ca0ca63d998ad30eac006512be67ac14e06b1dd6ff96b5a778ca10fe2bacd790eb5b1bda3ce1eac067d102779f7a4f4d7de9c9ba2e14c5ae1"
                                },
                                {
                                    "amount": 100,
                                    "address": "123456789"
                                }
                            ]
                        }
                    ]
                    for(let elems of resp1) {
                        const fromAdd = elems.input.address
                        console.log(`From   : ${fromAdd}`)
                        for (const output of elems.outputs) { // Transactions [0] is remaining credits
                            if (output.address === fromAdd) continue
                            else {
                                console.log(`To     : ${output.address}`)
                                console.log(`Amount : ${output.amount}`)
                            }
                        }
                    }
                    
                    let b = new XMLHttpRequest()
                    b.open("GET", `/mine-transactions`)
                    b.send()
                    b.onreadystatechange = function() {
                        if (this.readyState == 4 && this.status == 200) {
                            resp2 = JSON.parse(JSON.stringify(b.responseText, null, 4))
                            resp2 = JSON.parse(resp2)
                            // console.log(resp2) work

                            console.log(`-------START BLOCK TEST--------`)
                            for(let blockNum of resp2) {
                                console.log(`Time: ${blockNum.timestamp}`)
                                console.log(`Hash: ${blockNum.hash}`)
                                console.log(`Diff: ${blockNum.difficulty}`)

                                const div = document.createElement(`div`)

                                div.className = `resultChain`
                                div.innerHTML = `
                                    <div class="res">From   : ${fromAdd}</div>
                                    <div class="res">To     : ${output.address}</div>
                                    <div class="res">Amount : ${output.amount}</div>
                                    <div class="res">Time   : ${blockNum.timestamp}</div>
                                `
                                document.getElementById(`ledger`).appendChild(div)
                            }
                        
                        }
                        // TODO:
                        // 1. Make sure output @line 153 could access the output from
                        //  line 124
                        // 2. Try to append the html together with value
                        // 3. Set the architecture, either envelope ajax a together with b
                        // or b in a to make all variable accessible
                        // 4. Create the display to display chain or multiple chain 
                    }
                }
            }
        }
    
        
    // EJS script alternative : https://stackoverflow.com/a/57594261 or
    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset
    </script>

</body>
</html>